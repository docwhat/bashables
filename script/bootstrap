#!/usr/bin/env bash
# shellcheck disable=SC2310

set -euo pipefail

root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
readonly root

readonly red=$'\033[31m'
readonly green=$'\033[32m'
readonly yellow=$'\033[33m'
readonly gray=$'\033[90m'
readonly bold=$'\033[1m'
readonly reset=$'\033[0m'

readonly checkmark="${green}âœ”${reset}"
readonly crossmark="${red}âœ˜${reset}"

has() {
  command -v "$1" >/dev/null 2>&1
}

success() {
  printf "%s %s%s%s\n" "${checkmark}" "${green}${bold}" "$1" "${reset}"
}

failure() {
  printf "%s %s%s%s\n" "${crossmark}" "${red}${bold}" "$1" "${reset}"
}

instructions() {
  printf "  %s%s%s\n" "${yellow}${bold}" "$1" "${reset}"
}

instructional_command() {
  printf "    %s%s%s\n" "${gray}" "$1" "${reset}"
}

declare _os='' # memoize OS
# os tries to detect the Operating System.
os() {
  if [[ -z ${_os} ]]; then
    case "$(uname -s)" in
    Darwin) _os="macos" ;;
    Linux)
      if [[ -f /etc/os-release ]]; then
        _os=$(sh -c '. /etc/os-release; printf "%s" "${ID}"')
      else
        echo _os="linux"
      fi
      ;;
    *) _os="unknown" ;;
    esac
  fi
  printf "%s" "${_os}"
}

"${root}/script/trunk" install --no-progress >/dev/null
success "trunk"

## BATS-CORE
############################################################
has_bats=0
if has bats; then
  bats_version=$(bats --version 2>/dev/null)
  if [[ ${bats_version} == *"Bats 1"* ]]; then
    has_bats=1
  fi
fi

if ((has_bats)); then
  success "bats-core"
else
  failure "missing bats-core"
  instructions "Please install bats-core 1.x."
  instructions "  https://bats-core.readthedocs.io/en/stable/installation.html"

  case "$(os)" in
  macos)
    instructions "For example, on macOS, you can use Homebrew:"
    instructions "  brew install bats-core"
    ;;
  ubuntu | debian)
    instructions "For example, on Ubuntu or Debian, you can use:"
    instructions "  sudo apt-get install bats"
    ;;
  *) ;;
  esac
fi

## SCRIPT
############################################################
if ! has script; then
  failure "missing script"
  instructions "Please install script(1)."
  case "$(os)" in
  ubuntu | debian)
    instructions "On Ubuntu or Debian, you can use:"
    instructions "  sudo apt-get install bsdutils"
    ;;
  fedora)
    instructions "On Fedora, you can use:"
    instructions "  sudo dnf install util-linux"
    ;;
  alpine)
    instructions "On Alpine, you can use:"
    instructions "  sudo apk add util-linux"
    ;;
  *)
    instructions "Check the documentation for your platform."
    ;;
  esac
fi

## shellcheck
############################################################
if ! has shellcheck; then
  failure "missing shellcheck"
  case "$(os)" in
  ubuntu | debian)
    instructions "On Ubuntu or Debian, you can use:"
    instructions "  sudo apt-get install shellcheck"
    ;;
  fedora)
    instructions "On Fedora, you can use:"
    instructions "  sudo dnf install ShellCheck"
    ;;
  alpine)
    instructions "On Alpine, you can use:"
    instructions "  sudo apk add shellcheck"
    ;;
  *)
    instructions "Please install shellcheck."
    instructions "Check the documentation for your platform."
    ;;
  esac
fi

echo
echo $'\033[0;32mDone! ðŸŽ‰\033[0m'

# EOF
